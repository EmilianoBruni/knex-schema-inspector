name: Tests

# on: [push, pull_request]
on: [workflow_dispatch] # disable after testing

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    # services:
    #   mysql:
    #     image: mysql:5.7
    #     command: --default-authentication-plugin=mysql_native_password
    #     environment:
    #       MYSQL_ROOT_PASSWORD: secret
    #       MYSQL_DATABASE: test_db
    #     ports:
    #       - 5100:3306
    #     volumes:
    #       - ./test/seed/mysql.sql:/docker-entrypoint-initdb.d/seed.sql
    #   postgres:
    #     image: postgres:12.3
    #     restart: always
    #     environment:
    #       POSTGRES_PASSWORD: secret
    #       POSTGRES_DB: test_db
    #     ports:
    #       - 5101:5432
    #     volumes:
    #       - ./test/seed/postgres.sql:/docker-entrypoint-initdb.d/seed.sql

    #   postgres10:
    #     image: postgres:10
    #     restart: always
    #     environment:
    #       POSTGRES_PASSWORD: secret
    #       POSTGRES_DB: test_db
    #     ports:
    #       - 5102:5432
    #     volumes:
    #       - ./test/seed/postgres10.sql:/docker-entrypoint-initdb.d/seed.sql

    #   mssql:
    #     image: mcr.microsoft.com/mssql/server:2017-CU24-ubuntu-16-04
    #     restart: always
    #     environment:
    #       - ACCEPT_EULA=Y
    #       - SA_PASSWORD=Test@123
    #     working_dir: /tmp/test
    #     command: sh -c './scripts/mssql-entrypoint.sh & /opt/mssql/bin/sqlservr'
    #     ports:
    #       - 1433:1433
    #     volumes:
    #       - mssql-volume:/var/opt/mssql/
    #       - ./test:/tmp/test

    #   # Note: you need to be logged in to DockerHub, and accept the EULA for oracle/database-enterprise to work
    #   #       ... no clue how to get around that in GH Actions for tests ...
    #   # See https://github.com/oracle/docker-images/issues/1156 for more on this
    #   # oracle:
    #   #   image: store/oracle/database-enterprise:12.2.0.1
    #   #   restart: always
    #   #   ports:
    #   #     - 1521:32769
    #   #     - 5500:32768
    #   #   tty: true

    #   oracle:
    #     image: quillbuilduser/oracle-18-xe-micro-sq
    #     ports:
    #       - 5104:1521
    #     environment:
    #       - OPATCH_JRE_MEMORY_OPTIONS=-Xms128m -Xmx256m -XX:PermSize=16m -XX:MaxPermSize=32m -Xss1m
    #       - ORACLE_ALLOW_REMOTE=true
    #     shm_size: '1gb'
    #     working_dir: /tmp/test
    #     command: sh -c './scripts/oracle-entrypoint.sh'
    #     volumes:
    #       - ./test:/tmp/test

    #   cockroachdb:
    #     image: cockroachdb/cockroach:latest-v21.2
    #     container_name: crdb
    #     hostname: crdb
    #     command: start-single-node --cluster-name=example-single-node --insecure
    #     volumes:
    #       - ./test/seed/postgres.sql:/docker-entrypoint-initdb.d/seed.sql
    #     ports:
    #       - '26257:26257'
    #       - '8080:8080'

    #   cockroachdb-init:
    #     image: cockroachdb/cockroach:latest-v21.2
    #     volumes:
    #       - ./test/seed/cockroachdb.sql:/seed.sql
    #       - ./test/scripts/cockroachdb-init.sh:/init.sh
    #     entrypoint: '/bin/bash'
    #     command: /init.sh

    env:
      LD_LIBRARY_PATH: /opt/oracle/instantclient_21_1

    container:
      image: ubuntu:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: init apt
        run: apt update && apt install -y sudo
      - name: Debug via browser
        uses: fawazahmed0/action-debug-vscode@main

      - name: Install Oracle client
        run: |
          apt install unzip wget
          wget -q https://download.oracle.com/otn_software/linux/instantclient/211000/instantclient-basiclite-linux.x64-21.1.0.0.0.zip
          mkdir -p /opt/oracle
          unzip -qo instantclient-basiclite-linux.x64-21.1.0.0.0.zip -d /opt/oracle

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Starting DB services under docker
        run: docker compose up -d

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - run: "while ! docker compose logs mysql | grep -q 'mysqld: ready for connections.'; do sleep 2; done"
      - run: "while ! docker compose logs postgres | grep -q 'database system is ready to accept connections'; do sleep 2; done"
      - run: "while ! docker compose logs mssql | grep -q 'SQL Server is now ready for client connections'; do sleep 2; done"


      - name: Run tests
        run: pnpm test
